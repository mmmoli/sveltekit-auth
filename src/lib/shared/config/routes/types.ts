/* eslint-disable */
/**
 * This file was generated by 'vite-plugin-kit-routes'
 *
 *      >> DO NOT EDIT THIS FILE MANUALLY <<
 */

/**
 * PAGES
 */
const PAGES = {
  "_ROOT": `/`,
  "privacy": `/privacy`,
  "terms": `/terms`,
  "dashboard": `/dashboard`,
  "profile": `/profile`,
  "auth_oauth_google": `/auth/oauth/google`,
  "auth_oauth_google_callback": `/auth/oauth/google/callback`,
  "auth_password_reset": `/auth/password/reset`,
  "auth_password_reset_success": `/auth/password/reset/success`,
  "auth_password_update_token": (params: { token: (string | number) }) => {
    return `/auth/password/update-${params.token}`
  },
  "auth_password_update_token_success": (params: { token: (string | number) }) => {
    return `/auth/password/update-${params.token}/success`
  },
  "auth_sign_in": `/auth/sign-in`,
  "auth_sign_out": `/auth/sign-out`,
  "auth_sign_up": `/auth/sign-up`,
  "auth_verify_email": `/auth/verify/email`,
  "auth_verify_email_token": (params: { token: (string | number) }) => {
    return `/auth/verify/email-${params.token}`
  },
  "auth_verify_resend_email_email": (params: { email: (string | number) }) => {
    return `/auth/verify/resend-email-${params.email}`
  }
}

/**
 * SERVERS
 */
const SERVERS = {
  
}

/**
 * ACTIONS
 */
const ACTIONS = {
  "default profile": `/profile`,
  "default auth_password_reset": `/auth/password/reset`,
  "default auth_password_update_token": (params: { token: (string | number) }) => {
    return `/auth/password/update-${params.token}`
  },
  "default auth_sign_in": `/auth/sign-in`,
  "default auth_sign_out": `/auth/sign-out`,
  "default auth_sign_up": `/auth/sign-up`
}

/**
 * LINKS
 */
const LINKS = {
  
}

type ParamValue = string | number | undefined

/**
 * Append search params to a string
 */
export const appendSp = (sp?: Record<string, ParamValue | ParamValue[]>, prefix: '?' | '&' = '?') => {
  if (sp === undefined) return ''

  const params = new URLSearchParams()
  const append = (n: string, v: ParamValue) => {
    if (v !== undefined) {
      params.append(n, String(v))
    }
  }

  for (const [name, val] of Object.entries(sp)) {
    if (Array.isArray(val)) {
      for (const v of val) {
        append(name, v)
      }
    } else {
      append(name, val)
    }
  }

  const formatted = params.toString()
  if (formatted) {
    return `${prefix}${formatted}`
  }
  return ''
}

/**
 * get the current search params
 * 
 * Could be use like this:
 * ```
 * route("/cities", { page: 2 }, { ...currentSP() })
 * ```
 */ 
export const currentSp = () => {
  const params = new URLSearchParams(window.location.search)
  const record: Record<string, string> = {}
  for (const [key, value] of params.entries()) {
    record[key] = value
  }
  return record
}

function StringOrUndefined(val: any) {
  if (val === undefined) {
    return undefined
  }

  return String(val)
}

// route function helpers
type NonFunctionKeys<T> = { [K in keyof T]: T[K] extends Function ? never : K }[keyof T]
type FunctionKeys<T> = { [K in keyof T]: T[K] extends Function ? K : never }[keyof T]
type FunctionParams<T> = T extends (...args: infer P) => any ? P : never

const AllObjs = { ...PAGES, ...ACTIONS, ...SERVERS, ...LINKS }
type AllTypes = typeof AllObjs

/**
 * To be used like this: 
 * ```ts
 * import { route } from './ROUTES'
 * 
 * route('site_id', { id: 1 })
 * ```
 */
export function route<T extends FunctionKeys<AllTypes>>(key: T, ...params: FunctionParams<AllTypes[T]>): string
export function route<T extends NonFunctionKeys<AllTypes>>(key: T): string
export function route<T extends keyof AllTypes>(key: T, ...params: any[]): string {
  if (AllObjs[key] as any instanceof Function) {
    const element = (AllObjs as any)[key] as (...args: any[]) => string
    return element(...params)
  } else {
    return AllObjs[key] as string
  }
}

/**
* Add this type as a generic of the vite plugin `kitRoutes<KIT_ROUTES>`.
*
* Full example:
* ```ts
* import type { KIT_ROUTES } from './ROUTES'
* import { kitRoutes } from 'vite-plugin-kit-routes'
*
* kitRoutes<KIT_ROUTES>({
*  PAGES: {
*    // here, key of object will be typed!
*  }
* })
* ```
*/
export type KIT_ROUTES = {
  PAGES: { '_ROOT': never, 'privacy': never, 'terms': never, 'dashboard': never, 'profile': never, 'auth_oauth_google': never, 'auth_oauth_google_callback': never, 'auth_password_reset': never, 'auth_password_reset_success': never, 'auth_password_update_token': 'token', 'auth_password_update_token_success': 'token', 'auth_sign_in': never, 'auth_sign_out': never, 'auth_sign_up': never, 'auth_verify_email': never, 'auth_verify_email_token': 'token', 'auth_verify_resend_email_email': 'email' }
  SERVERS: Record<string, never>
  ACTIONS: { 'default profile': never, 'default auth_password_reset': never, 'default auth_password_update_token': 'token', 'default auth_sign_in': never, 'default auth_sign_out': never, 'default auth_sign_up': never }
  LINKS: Record<string, never>
  Params: { token: never, email: never }
}
